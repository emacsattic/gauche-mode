;;; gauche-dev.el --- Development tools for gauche-mode.el


;;; Commentary:
;; 

;;; Code:

(defun gauche-dev-parse-texi (texi)
  (with-temp-buffer
    (insert-file-contents texi)
    (goto-char (point-min))
    (let (ret)
      (while (re-search-forward "^@\\(?:defunx?\\|defmacx?\\|defspecx?\\) \\(.*\\)" nil t)
        (let* ((def (gauche-dev-split-define (match-string 1)))
               (name (intern (car def)))
               (args (gauche-dev-intern-string-args (cdr def))))
          (cond
           ((eq name '{))
           (t
            (setq ret (cons (cons name 
                                  (list (list 'lambda (gauche-dev-create-parsing-args args))))
                            ret))))))
      (nreverse ret))))

(defun gauche-dev-split-define (string)
  (let (arg args)
    (with-temp-buffer
      (insert string)
      (goto-char (point-min))
      (condition-case err
          (while t
            (setq a (read (current-buffer)))
            (setq args (cons (gauche-dev-sexp-to-string a) args)))
        (error nil))
      (nreverse args))))

(defun gauche-dev-sexp-to-string (sexp)
  (let ((tmp (prin1-to-string sexp)))
    (gauche-dev-replace-string tmp "\\?" "?")))

(defun gauche-dev-create-parsing-args (args)
  (let (new-args)
    (while args
      (cond
       ((eq (car args) :key)
        (setq new-args (cons (car args) new-args))
        (setq args (cdr args))
        (while args
          (setq new-args (cons (list (car args)) new-args))
          (setq args (cdr args))))
       (t
        (setq new-args (cons (car args) new-args))))
      (setq args (cdr args)))
    (nreverse new-args)))

(defun gauche-dev-intern-string-args (args)
  (mapcar 
   (lambda (arg)
     (setq arg (gauche-dev-replace-string arg "@dots{}" "..."))
     (setq arg (gauche-dev-replace-string arg "@var{optional}" ":optional"))
     (setq arg (gauche-dev-replace-string arg "@code{=>}" "'=>'"))
     (setq arg (gauche-dev-replace-macro arg))
     (intern arg))
   args))

(defun gauche-dev-replace-macro (string)
  (let ((str string))
    (while (string-match "@var{\\([^}]*\\)}" str)
      (setq str
            (concat (substring str 0 (match-beginning 0)) 
                    (match-string 1 str)
                    (substring str (match-end 0)))))
    str))

(defun gauche-dev-replace-string (string from to)
  (let ((str string)
        (case-fold-search))
    (while (string-match (regexp-quote from) str)
      (setq str 
            (concat (substring str 0 (match-beginning 0)) 
                    to
                    (substring str (match-end 0)))))
    str))

(defun gauche-dev-parse-and-insert (file)
  (let ((exports (gauche-dev-parse-texi file)))
    (insert "(defconst *gauche-documented-exports*\n")
    (insert "'(\n")
     (mapc
      (lambda (exp)
        (insert (prin1-to-string exp) "\n"))
      (append gauche-dev-other-defined exports))
     (insert "))\n")))

(defconst gauche-dev-other-defined
  '(
    (E2BIG integer)
    (EACCES integer)
    (EADDRINUSE integer)
    (EADDRNOTAVAIL integer)
    (EADV integer)
    (EAFNOSUPPORT integer)
    (EAGAIN integer)
    (EALREADY integer)
    (EBADE integer)
    (EBADF integer)
    (EBADFD integer)
    (EBADMSG integer)
    (EBADR integer)
    (EBADRQC integer)
    (EBADSLT integer)
    (EBFONT integer)
    (EBUSY integer)
    (ECANCELED integer)
    (ECHILD integer)
    (ECHRNG integer)
    (ECOMM integer)
    (ECONNABORTED integer)
    (ECONNREFUSED integer)
    (ECONNRESET integer)
    (EDEADLK integer)
    (EDEADLOCK integer)
    (EDESTADDRREQ integer)
    (EDOM integer)
    (EDOTDOT integer)
    (EDQUOT integer)
    (EEXIST integer)
    (EFAULT integer)
    (EFBIG integer)
    (EHOSTDOWN integer)
    (EHOSTUNREACH integer)
    (EIDRM integer)
    (EILSEQ integer)
    (EINPROGRESS integer)
    (EINTR integer)
    (EINVAL integer)
    (EIO integer)
    (EISCONN integer)
    (EISDIR integer)
    (EISNAM integer)
    (EKEYEXPIRED integer)
    (EKEYREJECTED integer)
    (EKEYREVOKED integer)
    (EL2HLT integer)
    (EL2NSYNC integer)
    (EL3HLT integer)
    (EL3RST integer)
    (ELIBACC integer)
    (ELIBBAD integer)
    (ELIBEXEC integer)
    (ELIBMAX integer)
    (ELIBSCN integer)
    (ELNRNG integer)
    (ELOOP integer)
    (EMEDIUMTYPE integer)
    (EMFILE integer)
    (EMLINK integer)
    (EMSGSIZE integer)
    (EMULTIHOP integer)
    (ENAMETOOLONG integer)
    (ENAVAIL integer)
    (ENETDOWN integer)
    (ENETRESET integer)
    (ENETUNREACH integer)
    (ENFILE integer)
    (ENOANO integer)
    (ENOBUFS integer)
    (ENOCSI integer)
    (ENODATA integer)
    (ENODEV integer)
    (ENOENT integer)
    (ENOEXEC integer)
    (ENOKEY integer)
    (ENOLCK integer)
    (ENOLINK integer)
    (ENOMEDIUM integer)
    (ENOMEM integer)
    (ENOMSG integer)
    (ENONET integer)
    (ENOPKG integer)
    (ENOPROTOOPT integer)
    (ENOSPC integer)
    (ENOSR integer)
    (ENOSTR integer)
    (ENOSYS integer)
    (ENOTBLK integer)
    (ENOTCONN integer)
    (ENOTDIR integer)
    (ENOTEMPTY integer)
    (ENOTNAM integer)
    (ENOTSOCK integer)
    (ENOTTY integer)
    (ENOTUNIQ integer)
    (ENXIO integer)
    (EOPNOTSUPP integer)
    (EOVERFLOW integer)
    (EPERM integer)
    (EPFNOSUPPORT integer)
    (EPIPE integer)
    (EPROTO integer)
    (EPROTONOSUPPORT integer)
    (EPROTOTYPE integer)
    (ERANGE integer)
    (EREMCHG integer)
    (EREMOTE integer)
    (EREMOTEIO integer)
    (ERESTART integer)
    (EROFS integer)
    (ESHUTDOWN integer)
    (ESOCKTNOSUPPORT integer)
    (ESPIPE integer)
    (ESRCH integer)
    (ESRMNT integer)
    (ESTALE integer)
    (ESTRPIPE integer)
    (ETIME integer)
    (ETIMEDOUT integer)
    (ETOOMANYREFS integer)
    (ETXTBSY integer)
    (EUCLEAN integer)
    (EUNATCH integer)
    (EUSERS integer)
    (EWOULDBLOCK integer)
    (EXDEV integer)
    (EXFULL integer)
    (F_OK integer)
    (LC_ALL integer)
    (LC_COLLATE integer)
    (LC_CTYPE integer)
    (LC_MONETARY integer)
    (LC_NUMERIC integer)
    (LC_TIME integer)
    (RAND_MAX integer)
    (R_OK integer)
    (SEEK_CUR integer)
    (SEEK_END integer)
    (SEEK_SET integer)
    (SIGABRT integer)
    (SIGALRM integer)
    (SIGBUS integer)
    (SIGCHLD integer)
    (SIGCONT integer)
    (SIGFPE integer)
    (SIGHUP integer)
    (SIGILL integer)
    (SIGINT integer)
    (SIGIO integer)
    (SIGIOT integer)
    (SIGKILL integer)
    (SIGPIPE integer)
    (SIGPOLL integer)
    (SIGPROF integer)
    (SIGPWR integer)
    (SIGQUIT integer)
    (SIGSEGV integer)
    (SIGSTKFLT integer)
    (SIGSTOP integer)
    (SIGTERM integer)
    (SIGTRAP integer)
    (SIGTSTP integer)
    (SIGTTIN integer)
    (SIGTTOU integer)
    (SIGURG integer)
    (SIGUSR1 integer)
    (SIGUSR2 integer)
    (SIGVTALRM integer)
    (SIGWINCH integer)
    (SIGXCPU integer)
    (SIGXFSZ integer)
    (SIG_BLOCK integer)
    (SIG_SETMASK integer)
    (SIG_UNBLOCK integer)
    (W_OK integer)
    (X_OK integer)))



;; (gauche-dev-parse-and-insert "~/src/System/gauche/Gauche-0.9.1/doc/gauche-refe.texi")

(provide 'gauche-dev)

;;; gauche-dev.el ends here
